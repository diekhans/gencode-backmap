#!/usr/bin/env python

import sys, os
myBinDir = os.path.normpath(os.path.abspath(os.path.dirname(sys.argv[0])))
sys.path.append(myBinDir + "/../lib")
import argparse
from collections import defaultdict
from pycbio.sys import fileOps
from pycbio.tsv import TsvReader
from gencode import categoryCounts
from gencode.gencodeGenes import getFunctionForBioType, BioType

# FIXME: this has gotten very convoluted with all the options
# FIXME: this no longer works with mapInfo changes to output multiple, simpler rows.
# need to rewrite

raise Exception("program not working")

def parseArgs():
    desc="""produce a summary of the success of mappings produce by gencode-backmap
"""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('--biotypeGroup', type=str,
                        choices=("all", "srcBiotype", "srcBiocat"), default="all",
                        help="groups counts for all biotype, by biotype, or by catgeory ")
    parser.add_argument("--mappedStatusGroup", action="store_true", default=False,
                        help="group by mapped status (default in no other of the status grouping specified)")
    parser.add_argument("--targetStatusGroup", action="store_true", default=False,
                        help="group by target annotation status")
    parser.add_argument('--multimapGroup', action="store_true", default=False,
                        help="group counts single vs multiple mappers")
    parser.add_argument('--genomicSizeGroup', action="store_true", default=False,
                        help="group binning of gene or transcript genomic length")
    parser.add_argument('--substituteTargetGroup', action="store_true", default=False,
                        help="group by substituting target")
    parser.add_argument('--biotypeFilter', dest="biotypeFilters", action="append",
                        help="filter my this biotype, maybe repeated")
    parser.add_argument('--matrixColumnKey', dest="matrixColumnKey",
                        help="output a matrix with this column name as key, or one of special names: genomicSize")
    parser.add_argument('--rowFrequencies', action="store_true", default=False,
                        help="output matrix as row frequencies")
    parser.add_argument('--columnFrequencies', action="store_true", default=False,
                        help="output matrix as column frequencies")
    parser.add_argument('what', type=str, choices=("gene", "trans"),
                        help="analyze by gene or transcript")
    parser.add_argument('mapInfoTsv', type=str, help="mapInfo output of gencode-backmap")
    parser.add_argument('summaryOut', type=str, help="Summary output TSV")
    args = parser.parse_args()
    if args.biotypeFilters != None:
        args.biotypeFilters = frozenset(args.biotypeFilters)
    return args

def orderOfMagniudeBin(row):
    size = (row.srcEnd-row.srcStart)+1
    magBin = 1
    while size > magBin:
        magBin *= 10
    return magBin

class MapInfoSummary(object):
    def __init__(self, whatAnnotation, biotypeGroup, mappedStatusGroup, targetStatusGroup, multimapGroup, genomicSizeGroup, substituteTargetGroup,
                 biotypeFilters, columnKeyColumn):
        if biotypeFilters != None:
            self.filterFunc = lambda row: (row.type == whatAnnotation) and (row.srcBiotype in biotypeFilters)
        else:
            self.filterFunc = lambda row: row.type == whatAnnotation
        rowKeyHeader = []
        rowKeyFuncs = [] # list of functions to call to get keys
        if biotypeGroup == "srcBiotype": 
            rowKeyHeader.append("srcBiotype")
            rowKeyFuncs.append(lambda row: row.srcBiotype)
        elif biotypeGroup == "srcBiocat":
            rowKeyHeader.append("srcBiocat")
            rowKeyFuncs.append(lambda row: getFunctionForBioType(BioType(row.srcBiotype)))
        if genomicSizeGroup:
            rowKeyHeader.append("genomicSize")
            rowKeyFuncs.append(lambda row: orderOfMagniudeBin(row))
        if mappedStatusGroup:
            rowKeyHeader.append("mappedStatus")
            rowKeyFuncs.append(lambda row: row.mappedStatus)
        if targetStatusGroup:
            rowKeyHeader.append("targetStatus")
            rowKeyFuncs.append(lambda row: row.targetStatus)
        if multimapGroup:
            rowKeyHeader.append("multimap")
            rowKeyFuncs.append(lambda row: "yes" if (row.mappedCount > 1) else "no")
        if substituteTargetGroup:
            rowKeyHeader.append("targetSubst")
            rowKeyFuncs.append(lambda row: "yes" if (row.targetSubst != "") else "no")
        # calls all functions in list to generate key
        self.getRowKeys = lambda row: tuple([fn(row) for fn in rowKeyFuncs])
        self.getColumnKey = None
        if columnKeyColumn != None:
            if columnKeyColumn == "genomicSize":
                self.getColumnKey = lambda row: orderOfMagniudeBin(row)
            else:
                self.getColumnKey = lambda row: row[columnKeyColumn]
        self.counts = categoryCounts.CategoryCounts(rowKeyHeader)

    def count(self, mapInfoTsv):
        # id	type	biotype	srcChrom	srcStart	srcEnd	srcStrand	mappedChrom	mappedStart	mappedEnd	mappedStrand	mappedStatus	mappedCount
        typeMap={"srcStart": int, "srcEnd": int,
                 "mappedStart": int, "mappedEnd": int,
                 "mappedCount": int}
        self.counts.countTsv(mapInfoTsv, typeMap=typeMap, getRowKeys=self.getRowKeys, getColumnKey=self.getColumnKey, filterFunc=self.filterFunc)
        
    def writeCountsFreqs(self, outFh):
        self.counts.writeCountsFreqs(outFh, inclTotals=True)

    def writeCountsMatrix(self, outFh, rowFrequencies, columnFrequencies):
        self.counts.writeMatrix(outFh, rowFrequencies=rowFrequencies, columnFrequencies=columnFrequencies, inclTotals=True)

args = parseArgs()
summary = MapInfoSummary(args.what, args.biotypeGroup,
                         args.mappedStatusGroup, args.targetStatusGroup,
                         args.multimapGroup, args.genomicSizeGroup,
                         args.substituteTargetGroup,
                         args.biotypeFilters, args.matrixColumnKey)
summary.count(args.mapInfoTsv)
with open(args.summaryOut, "w") as outFh:
    if args.matrixColumnKey != None:
        summary.writeCountsMatrix(outFh, args.rowFrequencies, args.columnFrequencies)
    else:
        summary.writeCountsFreqs(outFh)
