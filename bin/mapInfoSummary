#!/usr/bin/env python

import sys, os
myBinDir = os.path.normpath(os.path.abspath(os.path.dirname(sys.argv[0])))
sys.path.append(myBinDir + "/../lib")
import argparse
from collections import defaultdict
from pycbio.sys import fileOps
from pycbio.tsv import TsvReader

def parseArgs():
    desc="""produce a summary of the success of mappings produce by gencode-backmap
"""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('mapInfoTsv', type=str, help="mapInfo output of gencode-backmap")
    parser.add_argument('summaryOut', type=str, help="Summary output TSV")
    args = parser.parse_args()
    return args

def getMapInfoReader(mapInfoTsv):
    return TsvReader(mapInfoTsv, typeMap={"srcStart": int, "srcEnd": int,
                                          "mappedStart": int, "mappedEnd": int,
                                          "numMappings": int})

def fmtRate(count, total):
    if total == 0:
        return "0.0"
    else:
        return format(float(count)/total, "0.2f")

class Counts(object):
    def __init__(self):
        self.total = 0
        self.byStatusCnts = defaultdict(int)
        self.multiMapCnt = 0

    def count(self, rec):
        self.total +=1
        self.byStatusCnts[rec.mappingStatus] += 1
        if rec.numMappings > 1:
            self.multiMapCnt += 1

    @staticmethod
    def reportHeader(outFh):
        fileOps.prRowv(outFh, "type", "status", "count", "freq")
    def reportRow(self, outFh, type, cat, cnt):
        fileOps.prRowv(outFh, type, cat, cnt, fmtRate(cnt, self.total))
    def report(self, outFh, type):
        for stat in sorted(self.byStatusCnts.iterkeys()):
            self.reportRow(outFh, type, stat, self.byStatusCnts[stat])
        self.reportRow(outFh, type, "multiMap", self.multiMapCnt)
        self.reportRow(outFh, type, "total", self.total)

class MapInfoSummary(object):
    def __init__(self):
        self.countByFeatureType = defaultdict(Counts)

    def record(self, mapInfoTsv):
        for rec in getMapInfoReader(mapInfoTsv):
            self.countByFeatureType[rec.type].count(rec)

    def report(self, outFh):
        Counts.reportHeader(outFh)
        for type in sorted(self.countByFeatureType.iterkeys()):
            self.countByFeatureType[type].report(outFh, type)
            
args = parseArgs()
summary = MapInfoSummary()
summary.record(args.mapInfoTsv)
with open(args.summaryOut, "w") as outFh:
    summary.report(outFh)
