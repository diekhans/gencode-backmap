#!/usr/bin/env python

import sys, os
myBinDir = os.path.normpath(os.path.abspath(os.path.dirname(sys.argv[0])))
sys.path.append(myBinDir + "/../lib")
import argparse
from collections import defaultdict
from pycbio.sys import fileOps
from pycbio.tsv import TsvReader
from gencode import categoryCounts
from gencode.gencodeGenes import getFunctionForBioType, BioType

def parseArgs():
    desc="""produce a summary of the success of mappings produce by gencode-backmap
"""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('--biotypeGroup', type=str,
                        choices=("all", "biotype","biocat"), default="all",
                        help="groups counts for all biotype, by biotype, or by catgeory ")
    parser.add_argument('--sourceGroup', action="store_true", default=False,
                       help="group counts by HAVANA vs ENSEMBL")
    parser.add_argument("--mappingStatusGroup", action="store_true", default=False,
                       help="group by mapping status (default in no other of the status grouping specified)")
    parser.add_argument("--targetStatusGroup", action="store_true", default=False,
                        help="group by target annotation status")
    parser.add_argument('--multimapGroup', action="store_true", default=False,
                       help="group counts single vs multiple mappers")
    parser.add_argument('--biotypeFilter', dest="biotypeFilters", action="append",
                        help="filter my this biotype, maybe repeated")
    parser.add_argument('what', type=str, choices=("gene", "transcript"),
                        help="analyze by gene or transcript")
    parser.add_argument('mapInfoTsv', type=str, help="mapInfo output of gencode-backmap")
    parser.add_argument('summaryOut', type=str, help="Summary output TSV")
    args = parser.parse_args()
    if not (args.sourceGroup or args.targetStatusGroup or args.multimapGroup):
        args.mappingStatusGroup = True
    if args.biotypeFilters != None:
        args.biotypeFilters = frozenset(args.biotypeFilters)
    return args


class MapInfoSummary(object):
    def __init__(self, whatAnnotation, biotypeGroup, sourceGroup, mappingStatusGroup, targetStatusGroup, multimapGroup,
                 biotypeFilters):
        if biotypeFilters != None:
            self.filterFunc = lambda row: (row.type == whatAnnotation) and (row.biotype in biotypeFilters)
        else:
            self.filterFunc = lambda row: row.type == whatAnnotation
        keyColumnHeader = []
        keyFuncs = [] # list of functions to call to get keys
        if sourceGroup:
            keyColumnHeader.append("source")
            keyFuncs.append(lambda row: row.source)
        if biotypeGroup == "biotype": 
            keyColumnHeader.append("biotype")
            keyFuncs.append(lambda row: row.biotype)
        elif biotypeGroup == "biocat":
            keyColumnHeader.append("biocat")
            keyFuncs.append(lambda row: getFunctionForBioType(BioType(row.biotype)))
        if mappingStatusGroup:
            keyColumnHeader.append("mappingStatus")
            keyFuncs.append(lambda row: row.mappingStatus)
        if targetStatusGroup:
            keyColumnHeader.append("targetStatus")
            keyFuncs.append(lambda row: row.targetStatus)
        if multimapGroup:
            keyColumnHeader.append("multimap")
            keyFuncs.append(lambda row: "yes" if (row.numMappings > 1) else "no")
        # calls all functions in list to generate key
        self.getKeys = lambda row: tuple([fn(row) for fn in keyFuncs])
        self.counts = categoryCounts.CategoryCounts(keyColumnHeader)

    def count(self, mapInfoTsv):
        # id	type	biotype	srcChrom	srcStart	srcEnd	srcStrand	mappedChrom	mappedStart	mappedEnd	mappedStrand	mappingStatus	numMappings
        typeMap={"srcStart": int, "srcEnd": int,
                 "mappedStart": int, "mappedEnd": int,
                 "numMappings": int}
        self.counts.countTsv(mapInfoTsv, typeMap=typeMap, getKeys=self.getKeys, filterFunc=self.filterFunc)
        
    def write(self, outFh):
        self.counts.write(outFh, inclTotals=True)

args = parseArgs()
summary = MapInfoSummary(args.what, args.biotypeGroup, args.sourceGroup,
                         args.mappingStatusGroup, args.targetStatusGroup,
                         args.multimapGroup, args.biotypeFilters)
summary.count(args.mapInfoTsv)
with open(args.summaryOut, "w") as outFh:
    summary.write(outFh)
