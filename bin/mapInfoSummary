#!/usr/bin/env python

import sys, os
myBinDir = os.path.normpath(os.path.abspath(os.path.dirname(sys.argv[0])))
sys.path.append(myBinDir + "/../lib")
import argparse
from collections import defaultdict
from pycbio.sys import fileOps
from pycbio.tsv import TsvReader
from gencode import categoryCounts
from gencode.gencodeGenes import getFunctionForBioType, BioType

def parseArgs():
    desc="""produce a summary of the success of mappings produce by gencode-backmap
"""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('--biotypeGroup', type=str,
                        choices=("all", "biotype","biocat"), default="all",
                        help="groups counts for all biotype, by biotype, or by catgeory ")
    parser.add_argument('--multimapGroup', action="store_true", default=False,
                       help="grou counts single vs multiple mappers")
    parser.add_argument('what', type=str, choices=("gene", "transcript"),
                        help="analyze by gene or transcript")
    parser.add_argument('mapInfoTsv', type=str, help="mapInfo output of gencode-backmap")
    parser.add_argument('summaryOut', type=str, help="Summary output TSV")
    args = parser.parse_args()
    return args


class MapInfoSummary(object):
    def __init__(self, whatAnnotation, biotypeGroup, multimapGroup):
        self.filterFunc = lambda row: row.type == whatAnnotation
        keyColumnHeader = []
        keyFuncs = [] # list of functions to call to get keys
        if biotypeGroup == "biotype": 
            keyColumnHeader.append("biotype")
            keyFuncs.append(lambda row: row.biotype)
        elif biotypeGroup == "biocat":
            keyColumnHeader.append("biocat")
            keyFuncs.append(lambda row: getFunctionForBioType(BioType(row.biotype)))
        keyColumnHeader.append("mappingStatus")
        keyFuncs.append(lambda row: row.mappingStatus)
        if multimapGroup:
            keyColumnHeader.append("multimap")
            keyFuncs.append(lambda row: "yes" if (row.numMappings > 1) else "no")
        self.getKeys = lambda row: tuple([fn(row) for fn in keyFuncs])
        self.counts = categoryCounts.CategoryCounts(keyColumnHeader)

    def count(self, mapInfoTsv):
        # id	type	biotype	srcChrom	srcStart	srcEnd	srcStrand	mappedChrom	mappedStart	mappedEnd	mappedStrand	mappingStatus	numMappings
        typeMap={"srcStart": int, "srcEnd": int,
                 "mappedStart": int, "mappedEnd": int,
                 "numMappings": int}
        self.counts.countTsv(mapInfoTsv, typeMap=typeMap, getKeys=self.getKeys, filterFunc=self.filterFunc)
        
        
    def write(self, outFh):
        self.counts.write(outFh, inclTotals=True)

args = parseArgs()
summary = MapInfoSummary(args.what, args.biotypeGroup, args.multimapGroup)
summary.count(args.mapInfoTsv)
with open(args.summaryOut, "w") as outFh:
    summary.write(outFh)
